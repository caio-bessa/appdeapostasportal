#!/usr/bin/env python3

import requests
import json
from datetime import datetime

def comprehensive_test():
    """Teste abrangente do portal AppdeApostas com an√°lise detalhada"""
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "portal_url": "https://appdeapostas.com.br",
        "tests": {
            "frontend": [],
            "backend": [],
            "static_routes": [],
            "dynamic_routes": []
        },
        "summary": {},
        "issues_identified": [],
        "recommendations": []
    }
    
    print("=" * 80)
    print("RELAT√ìRIO FINAL DE TESTES - PORTAL APPDEAPOSTAS.COM.BR")
    print("=" * 80)
    print(f"Data/Hora: {report['timestamp']}")
    print()
    
    # 1. Testar rotas est√°ticas
    print("1. TESTANDO ROTAS EST√ÅTICAS:")
    print("-" * 40)
    
    static_routes = [
        ("Home Page", "https://appdeapostas.com.br", "P√°gina principal"),
        ("An√°lises", "https://appdeapostas.com.br/analises", "Se√ß√£o de an√°lises"),
        ("Apps", "https://appdeapostas.com.br/apps", "Listagem de apps"),
        ("Blog", "https://appdeapostas.com.br/blog", "Blog do site"),
        ("B√¥nus", "https://appdeapostas.com.br/bonus", "Se√ß√£o de b√¥nus"),
        ("Odds", "https://appdeapostas.com.br/odds", "Se√ß√£o de odds"),
        ("Tutoriais", "https://appdeapostas.com.br/tutoriais", "Se√ß√£o de tutoriais")
    ]
    
    for name, url, description in static_routes:
        try:
            response = requests.get(url, timeout=30)
            status = "‚úÖ OK" if response.status_code == 200 else f"‚ùå {response.status_code}"
            content_length = len(response.text)
            
            test_result = {
                "name": name,
                "url": url,
                "status_code": response.status_code,
                "content_length": content_length,
                "success": response.status_code == 200
            }
            
            report["tests"]["static_routes"].append(test_result)
            print(f"  {status} {name}: {content_length} chars")
            
        except Exception as e:
            print(f"  ‚ùå {name}: ERRO - {str(e)}")
            report["tests"]["static_routes"].append({
                "name": name,
                "url": url,
                "error": str(e),
                "success": False
            })
    
    # 2. Testar rotas din√¢micas problem√°ticas
    print("\\n2. TESTANDO ROTAS DIN√ÇMICAS (que eram 404):")
    print("-" * 50)
    
    dynamic_routes = [
        ("Categoria Promo√ß√µes", "https://appdeapostas.com.br/categoria/promocoes", "Deveria existir nos dados"),
        ("Time Flamengo", "https://appdeapostas.com.br/times/flamengo", "Existe nos dados de times"),
        ("Autor Admin", "https://appdeapostas.com.br/autor/admin", "Pode n√£o existir nos dados"),
        ("Tag Bonus", "https://appdeapostas.com.br/tag/bonus", "Tag gen√©rica"),
        ("Artigo Espec√≠fico", "https://appdeapostas.com.br/noticias/promocoes/betano-super-odd-brasil-copa", "Artigo espec√≠fico")
    ]
    
    for name, url, note in dynamic_routes:
        try:
            response = requests.get(url, timeout=30)
            
            # Verificar se √© realmente uma p√°gina 404 do Next.js
            is_nextjs_404 = (
                response.status_code == 404 and 
                "This page could not be found" in response.text and
                "next-error-h1" in response.text
            )
            
            status = "‚úÖ OK" if response.status_code == 200 else f"‚ùå {response.status_code}"
            if is_nextjs_404:
                status += " (Next.js 404)"
            
            test_result = {
                "name": name,
                "url": url,
                "status_code": response.status_code,
                "is_nextjs_404": is_nextjs_404,
                "content_length": len(response.text),
                "note": note,
                "success": response.status_code == 200
            }
            
            report["tests"]["dynamic_routes"].append(test_result)
            print(f"  {status} {name}")
            print(f"    ‚Üí {note}")
            
        except Exception as e:
            print(f"  ‚ùå {name}: ERRO - {str(e)}")
            report["tests"]["dynamic_routes"].append({
                "name": name,
                "url": url,
                "error": str(e),
                "note": note,
                "success": False
            })
    
    # 3. Testar Backend/API
    print("\\n3. TESTANDO BACKEND/API:")
    print("-" * 30)
    
    api_endpoints = [
        ("Health Check", "https://appdeapostas.com.br/api/v1/health"),
        ("Categories", "https://appdeapostas.com.br/api/v1/categories"),
        ("Articles", "https://appdeapostas.com.br/api/v1/articles"),
        ("Authors", "https://appdeapostas.com.br/api/v1/authors"),
        ("Teams", "https://appdeapostas.com.br/api/v1/teams")
    ]
    
    for name, url in api_endpoints:
        try:
            response = requests.get(url, timeout=15)
            status = "‚úÖ OK" if response.status_code == 200 else f"‚ùå {response.status_code}"
            
            test_result = {
                "name": name,
                "url": url,
                "status_code": response.status_code,
                "content_length": len(response.text),
                "success": response.status_code == 200
            }
            
            if response.status_code == 502:
                test_result["error_type"] = "Bad Gateway - Backend n√£o est√° respondendo"
            
            report["tests"]["backend"].append(test_result)
            print(f"  {status} {name}")
            
        except Exception as e:
            print(f"  ‚ùå {name}: ERRO - {str(e)}")
            report["tests"]["backend"].append({
                "name": name,
                "url": url,
                "error": str(e),
                "success": False
            })
    
    # 4. An√°lise e Diagn√≥stico
    print("\\n4. DIAGN√ìSTICO DETALHADO:")
    print("-" * 40)
    
    static_success = len([t for t in report["tests"]["static_routes"] if t.get("success", False)])
    total_static = len(report["tests"]["static_routes"])
    
    dynamic_success = len([t for t in report["tests"]["dynamic_routes"] if t.get("success", False)])
    total_dynamic = len(report["tests"]["dynamic_routes"])
    
    backend_success = len([t for t in report["tests"]["backend"] if t.get("success", False)])
    total_backend = len(report["tests"]["backend"])
    
    print(f"‚úÖ Rotas Est√°ticas: {static_success}/{total_static} funcionando")
    print(f"‚ùå Rotas Din√¢micas: {dynamic_success}/{total_dynamic} funcionando") 
    print(f"‚ùå Backend/API: {backend_success}/{total_backend} funcionando")
    
    # Identificar problemas
    if backend_success == 0:
        report["issues_identified"].append("Backend completamente indispon√≠vel (erro 502)")
        print("\\nüö® PROBLEMA PRINCIPAL IDENTIFICADO:")
        print("   ‚Üí Backend est√° retornando erro 502 (Bad Gateway)")
        print("   ‚Üí Isso explica por que as rotas din√¢micas n√£o funcionam")
    
    if dynamic_success == 0:
        report["issues_identified"].append("Todas as rotas din√¢micas retornam 404 do Next.js")
        print("\\nüö® CONSEQU√äNCIA:")
        print("   ‚Üí Como o backend n√£o funciona, o frontend n√£o consegue buscar dados")
        print("   ‚Üí Rotas din√¢micas [slug] chamam notFound() quando n√£o h√° dados")
    
    # Recomenda√ß√µes
    print("\\n5. RECOMENDA√á√ïES PARA CORRE√á√ÉO:")
    print("-" * 50)
    
    recommendations = [
        "1. URGENTE: Corrigir o backend que est√° com erro 502",
        "2. Verificar se o servidor backend est√° rodando na EC2",
        "3. Verificar logs do backend para identificar o erro espec√≠fico", 
        "4. Configurar NEXT_PUBLIC_STRAPI_URL corretamente no .env.production",
        "5. Como alternativa tempor√°ria, implementar dados est√°ticos nos templates"
    ]
    
    for rec in recommendations:
        print(f"   {rec}")
        report["recommendations"].append(rec)
    
    # Compara√ß√£o Antes vs Depois
    print("\\n6. COMPARA√á√ÉO: ANTES vs DEPOIS DO DEPLOY:")
    print("-" * 60)
    print("ANTES DO DEPLOY:")
    print("  ‚ùå Rotas din√¢micas retornavam 404")
    print("  ‚ùå Templates [slug] n√£o existiam")
    print("\\nDEPOIS DO DEPLOY:")
    print("  ‚úÖ Templates din√¢micos foram criados corretamente")
    print("  ‚úÖ Estrutura de rotas est√° funcionando") 
    print("  ‚úÖ P√°gina principal funciona perfeitamente")
    print("  ‚ùå Backend est√° indispon√≠vel (erro 502)")
    print("  ‚ùå Rotas din√¢micas ainda retornam 404 (por falta de dados)")
    
    print("\\nüìä CONCLUS√ÉO:")
    print("   O deploy foi PARCIALMENTE bem-sucedido:")
    print("   ‚Ä¢ Frontend foi deployado corretamente")
    print("   ‚Ä¢ Templates din√¢micos foram criados") 
    print("   ‚Ä¢ Problema est√° no backend que n√£o responde")
    
    # Salvar relat√≥rio
    with open('/Users/caiobessa/news-portal/final_test_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\\nüíæ Relat√≥rio completo salvo em: /Users/caiobessa/news-portal/final_test_report.json")
    
    return report

if __name__ == "__main__":
    comprehensive_test()